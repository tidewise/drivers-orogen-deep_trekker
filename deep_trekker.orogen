name "deep_trekker"

using_library "deep_trekker"

import_types_from "deep_trekkerTypes.hpp"
import_types_from "deep_trekker/DeepTrekkerCommands.hpp"
import_types_from "deep_trekker/DeepTrekkerStates.hpp"
import_types_from "iodrivers_base"
import_types_from "base"

task_context "RevolutionTask" do
    needs_configuration

    # API version
    property "api_version", "std/string"
    # The model number of each device
    property "devices_model", "deep_trekker/DevicesModel"
    # The IDs of each device
    property "devices_id", "deep_trekker/DevicesID"
    # For how long an input will be repeated before timing out
    property "input_timeout", "base/Time"
    # Camera head tilt limits
    property "camera_head_limits", "deep_trekker/CameraHeadLimits"
    # Constant offset command for vertical thrusters to counteract buoyancy,
    # as buoyancy is positive in z, it should should be a negative value
    property "buoyancy_compensation_offset_command", "double"
    # How often should a request be sent to update the powered reel states
    property "powered_reel_update_interval", "base/Time"
    # How often should a request be sent to update the revolution pose z attitude
    property "pose_z_attitude_update_interval", "base/Time"
    # Matrix to correct the behavior in drive commands for different axis
    # and to add offset commands
    # The first row will compensate the behavior for the linear command in x-axis, the
    # second for linear command in y-axis, and so on
    # The 7th column are relative to the offsets
    #
    # This matrix has to be 6x7 if one writes this property programmatically (as opposed
    # to loading it from a YAML file), you must transpose it before writing it. See the
    # comments in configureHook for more details.
    property "compensation_matrix", "base/MatrixXd"
    # Describes what's the update interval to send get requests for specific data in the
    # API.
    property "get_requests_intervals", "deep_trekker/GetRequestsIntervals"

    # Tilt camera head position/speed joint command
    input_port "tilt_camera_head_command", "base/samples/Joints"
    # Camera head light command
    input_port "camera_head_light", "double"
    # Camera head laser command
    input_port "camera_head_laser_enable", "bool"
    # Grabber raw joint commands
    input_port "grabber_command", "base/samples/Joints"
    # Vehicle setpoint in local frame
    input_port "drive_command", "base/commands/LinearAngular6DCommand"
    # Vehicle setpoint in local frame
    input_port "drive_mode_command", "deep_trekker/DriveMode"
    # Vehicle light command
    input_port "light_command", "double"
    # Powered reel speed joint command
    input_port "powered_reel_command", "base/samples/Joints"
    # Rawdata in
    input_port "data_in", "iodrivers_base/RawPacket"
    # Rawdata in
    input_port "motors_disabled", "bool"

    # Rawdata out
    output_port "data_out", "iodrivers_base/RawPacket"
    # Revolution camera head state
    output_port "camera_head_states", "deep_trekker/TiltCameraHead"
    # Revolution camera head tilt state
    output_port "camera_head_tilt_states", "base/samples/Joints"
    # Revolution camera head tilt state in rigid body state form
    output_port "camera_head_tilt_states_rbs", "base/samples/RigidBodyState"
    # Revolution states
    output_port "revolution_states", "deep_trekker/Revolution"
    # Magnetic declination, added to the heading reported by the ROV
    property "nwu_magnetic2nwu", "/base/Angle"
    # Revolution pose (z and attitude)
    output_port "revolution_pose_z_attitude", "base/samples/RigidBodyState"
    # Revolution motor states
    output_port "revolution_motor_states", "base/samples/Joints"
    # Grabber motor states
    output_port "grabber_motor_states", "deep_trekker/Grabber"
    # Powered reel states
    output_port "powered_reel_states", "deep_trekker/PoweredReel"
    # Tether length
    output_port "tether_length", "double"
    # Powered reel motor states
    output_port "powered_reel_motor_states", "base/samples/Joints"
    # Manual reel states
    output_port "manual_reel_states", "deep_trekker/ManualReel"
    # Whether motors are disabled
    output_port "motors_disabled_state", "bool"
    # Whether auto stabilization is enabled
    output_port "auto_stabilization_state", "bool"
    # The command issued to the ROV after compensation
    output_port "command", "base/commands/LinearAngular6DCommand"

    periodic 0.005
end
